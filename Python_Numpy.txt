Microsoft Windows [Versión 10.0.18362.836]
(c) 2019 Microsoft Corporation. Todos los derechos reservados.

C:\Users\melendez>cd C:\Users\melendez\anaconda3\Scripts>
La sintaxis del comando no es correcta.

C:\Users\melendez>cd C:\Users\melendez\anaconda3\Scripts

C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: path = 'C:\Python\ReadFileTest.txt'

In [2]: with open(path) as f:
   ...:     lines = [x for x in f]
   ...:

In [3]: lines
Out[3]:
['SueÃ±a el rico en su riqueza,\n',
 'que mÃ¡s cuidados le ofrece;\n',
 '\n',
 'sueÃ±a el pobre que padece,\n',
 'su miseria y su pobreza;\n',
 '\n',
 'sueÃ±a el que a medrar empieza,\n',
 'sueÃ±a el que afana y pretende,\n',
 'sueÃ±a el que agravia y ofende,\n',
 '\n',
 'y en el mundo, en conclusiÃ³n,\n',
 'todos sueÃ±an lo que son\n',
 'aunque ninguno lo entiende\n',
 '\n']

In [4]: with open(path) as f:
   ...:     lines = [x.rstrip() for x in f]
   ...:
   ...:

In [5]: lines
Out[5]:
['SueÃ±a el rico en su riqueza,',
 'que mÃ¡s cuidados le ofrece;',
 '',
 'sueÃ±a el pobre que padece,',
 'su miseria y su pobreza;',
 '',
 'sueÃ±a el que a medrar empieza,',
 'sueÃ±a el que afana y pretende,',
 'sueÃ±a el que agravia y ofende,',
 '',
 'y en el mundo, en conclusiÃ³n,',
 'todos sueÃ±an lo que son',
 'aunque ninguno lo entiende',
 '']

In [6]: f=open(path)

In [7]: f.read(10)
Out[7]: 'SueÃ±a el '

In [8]: f2 = open(path, 'rb')  # binary mode

In [9]: f2.read(10)
Out[9]: b'Sue\xc3\xb1a el '

In [10]: f.tell()
Out[10]: 10

In [11]: f2.tell()
Out[11]: 10

In [12]: import sys

In [13]: sys.getdefaultencoding()
Out[13]: 'utf-8'

In [14]: f.seek(3)
Out[14]: 3

In [15]: f.read(1)
Out[15]: 'Ã'

In [16]: f.close()

In [17]: f2.close()

In [18]: with open('c:Quit

C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: path = 'C:\Python\ReadFileTest.txt'

In [2]: with open('c:\tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-2-2ef8cd10e419> in <module>
----> 1 with open('c:\tmp.txt', 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'c:\tmp.txt'

In [3]: with open('C:\tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-3-71b9cec70c11> in <module>
----> 1 with open('C:\tmp.txt', 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'C:\tmp.txt'

In [4]: with open('tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:

In [5]: path2='c:\Python\tmp.txt'

In [6]: with open(path2, 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-6-a72f2946401a> in <module>
----> 1 with open(path2, 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'c:\\Python\tmp.txt'

In [7]: path2
Out[7]: 'c:\\Python\tmp.txt'

In [8]: path
Out[8]: 'C:\\Python\\ReadFileTest.txt'

In [9]: path2='C:\Python\tmp.txt'

In [10]: path2
Out[10]: 'C:\\Python\tmp.txt'

In [11]: with open(path2, 'w') as handle:
    ...:     handle.writelines(x for x in open(path) if len(x) > 1)
    ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-11-a72f2946401a> in <module>
----> 1 with open(path2, 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'C:\\Python\tmp.txt'

In [12]: with open('tmp.txt') as entrada:
    ...:     lines = entrada.readlines
    ...:

In [13]: lines
Out[13]: <function TextIOWrapper.readlines(hint=-1, /)>

In [14]: with open('tmp.txt') as entrada:
    ...:     lines = entrada.readlines()
    ...:

In [15]: lines
Out[15]:
['SueÃ±a el rico en su riqueza,\n',
 'que mÃ¡s cuidados le ofrece;\n',
 'sueÃ±a el pobre que padece,\n',
 'su miseria y su pobreza;\n',
 'sueÃ±a el que a medrar empieza,\n',
 'sueÃ±a el que afana y pretende,\n',
 'sueÃ±a el que agravia y ofende,\n',
 'y en el mundo, en conclusiÃ³n,\n',
 'todos sueÃ±an lo que son\n',
 'aunque ninguno lo entiende\n']

In [16]: path='examples\segismundo.txt'

In [17]: with open(path) as f:
    ...:     lines=f.readlines()
    ...:
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-17-dfdd5f992763> in <module>
----> 1 with open(path) as f:
      2     lines=f.readlines()
      3

FileNotFoundError: [Errno 2] No such file or directory: 'examples\\segismundo.txt'

In [18]: path = 'examples/segismundo.txt'

In [19]: with open(path) as f:
    ...:     lines=f.readlines()
    ...:
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-19-dfdd5f992763> in <module>
----> 1 with open(path) as f:
      2     lines=f.readlines()
      3

FileNotFoundError: [Errno 2] No such file or directory: 'examples/segismundo.txt'

In [20]: path = 'C:\Python\ReadFileTest.txt'

In [21]: with open(path) as f:
    ...:     chars = f.read(10)
    ...:

In [22]: chars
Out[22]: 'SueÃ±a el '

In [23]: with open(path,'rb') as f:
    ...:     data = f.read(10)
    ...:

In [24]: data
Out[24]: b'Sue\xc3\xb1a el '

In [25]: data.decode('utf8')
Out[25]: 'Sueña el '

In [26]: data[:4].decode('utf8')
---------------------------------------------------------------------------
UnicodeDecodeError                        Traceback (most recent call last)
<ipython-input-26-0ad9ad6a11bd> in <module>
----> 1 data[:4].decode('utf8')

UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc3 in position 3: unexpected end of data

In [27]: cadena='hola mundo'

In [28]: print(cadena(:4))
  File "<ipython-input-28-ba360d47c942>", line 1
    print(cadena(:4))
                 ^
SyntaxError: invalid syntax


In [29]: cadena(:4)
  File "<ipython-input-29-e14bdf97c88f>", line 1
    cadena(:4)
           ^
SyntaxError: invalid syntax


In [30]: cadena[:4]
Out[30]: 'hola'

In [31]:

In [31]: cadena[4:]
Out[31]: ' mundo'

In [32]: import numpy as np
C:\Users\melendez\anaconda3\lib\site-packages\numpy\__init__.py:140: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service
  from . import _distributor_init
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
~\anaconda3\lib\site-packages\numpy\core\__init__.py in <module>
     23 try:
---> 24     from . import multiarray
     25 except ImportError as exc:

~\anaconda3\lib\site-packages\numpy\core\multiarray.py in <module>
     13
---> 14 from . import overrides
     15 from . import _multiarray_umath

~\anaconda3\lib\site-packages\numpy\core\overrides.py in <module>
      6
----> 7 from numpy.core._multiarray_umath import (
      8     add_docstring, implement_array_function, _get_implementing_args)

ImportError: DLL load failed: No se puede encontrar el módulo especificado.

During handling of the above exception, another exception occurred:

ImportError                               Traceback (most recent call last)
<ipython-input-32-0aa0b027fcb6> in <module>
----> 1 import numpy as np

~\anaconda3\lib\site-packages\numpy\__init__.py in <module>
    140     from . import _distributor_init
    141
--> 142     from . import core
    143     from .core import *
    144     from . import compat

~\anaconda3\lib\site-packages\numpy\core\__init__.py in <module>
     52 """ % (sys.version_info[0], sys.version_info[1], sys.executable,
     53         __version__, exc)
---> 54     raise ImportError(msg)
     55 finally:
     56     for envkey in env_added:

ImportError:

IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!

Importing the numpy c-extensions failed.
- Try uninstalling and reinstalling numpy.
- If you have already done that, then:
  1. Check that you expected to use Python3.7 from "C:\Users\melendez\anaconda3\python.exe",
     and that you have no directories in your PATH or PYTHONPATH that can
     interfere with the Python and numpy version "1.18.1" you're trying to use.
  2. If (1) looks fine, you can open a new issue at
     https://github.com/numpy/numpy/issues.  Please include details on:
     - how you installed Python
     - how you installed numpy
     - your operating system
     - whether or not you have multiple versions of Python installed
     - if you built from source, your compiler versions and ideally a build log

- If you're working with a numpy git repository, try `git clean -xdf`
  (removes all files not under version control) and rebuild numpy.

Note: this error has many possible causes, so please don't comment on
an existing issue about this - open a new one instead.

Original error was: DLL load failed: No se puede encontrar el módulo especificado.


In [33]: quit

C:\Users\melendez\anaconda3\Scripts>cd ..

C:\Users\melendez\anaconda3>conda
usage: conda-script.py [-h] [-V] command ...

conda is a tool for managing and deploying applications, environments and packages.

Options:

positional arguments:
  command
    clean        Remove unused packages and caches.
    config       Modify configuration values in .condarc. This is modeled
                 after the git config command. Writes to the user .condarc
                 file (C:\Users\melendez\.condarc) by default.
    create       Create a new conda environment from a list of specified
                 packages.
    help         Displays a list of available conda commands and their help
                 strings.
    info         Display information about current conda install.
    init         Initialize conda for shell interaction. [Experimental]
    install      Installs a list of packages into a specified conda
                 environment.
    list         List linked packages in a conda environment.
    package      Low-level conda package utility. (EXPERIMENTAL)
    remove       Remove a list of packages from a specified conda environment.
    uninstall    Alias for conda remove.
    run          Run an executable in a conda environment. [Experimental]
    search       Search for packages and display associated information. The
                 input is a MatchSpec, a query language for conda packages.
                 See examples below.
    update       Updates conda packages to the latest compatible version.
    upgrade      Alias for conda update.

optional arguments:
  -h, --help     Show this help message and exit.
  -V, --version  Show the conda version number and exit.

conda commands available from other packages:
  build
  convert
  debug
  develop
  env
  index
  inspect
  metapackage
  render
  server
  skeleton
  verify

C:\Users\melendez\anaconda3>conda info

     active environment : None
            shell level : 0
       user config file : C:\Users\melendez\.condarc
 populated config files :
          conda version : 4.8.2
    conda-build version : 3.18.11
         python version : 3.7.6.final.0
       virtual packages :
       base environment : C:\Users\melendez\anaconda3  (writable)
           channel URLs : https://repo.anaconda.com/pkgs/main/win-64
                          https://repo.anaconda.com/pkgs/main/noarch
                          https://repo.anaconda.com/pkgs/r/win-64
                          https://repo.anaconda.com/pkgs/r/noarch
                          https://repo.anaconda.com/pkgs/msys2/win-64
                          https://repo.anaconda.com/pkgs/msys2/noarch
          package cache : C:\Users\melendez\anaconda3\pkgs
                          C:\Users\melendez\.conda\pkgs
                          C:\Users\melendez\AppData\Local\conda\conda\pkgs
       envs directories : C:\Users\melendez\anaconda3\envs
                          C:\Users\melendez\.conda\envs
                          C:\Users\melendez\AppData\Local\conda\conda\envs
               platform : win-64
             user-agent : conda/4.8.2 requests/2.22.0 CPython/3.7.6 Windows/10 Windows/10.0.18362
          administrator : False
             netrc file : None
           offline mode : False


C:\Users\melendez\anaconda3>conda
usage: conda-script.py [-h] [-V] command ...

conda is a tool for managing and deploying applications, environments and packages.

Options:

positional arguments:
  command
    clean        Remove unused packages and caches.
    config       Modify configuration values in .condarc. This is modeled
                 after the git config command. Writes to the user .condarc
                 file (C:\Users\melendez\.condarc) by default.
    create       Create a new conda environment from a list of specified
                 packages.
    help         Displays a list of available conda commands and their help
                 strings.
    info         Display information about current conda install.
    init         Initialize conda for shell interaction. [Experimental]
    install      Installs a list of packages into a specified conda
                 environment.
    list         List linked packages in a conda environment.
    package      Low-level conda package utility. (EXPERIMENTAL)
    remove       Remove a list of packages from a specified conda environment.
    uninstall    Alias for conda remove.
    run          Run an executable in a conda environment. [Experimental]
    search       Search for packages and display associated information. The
                 input is a MatchSpec, a query language for conda packages.
                 See examples below.
    update       Updates conda packages to the latest compatible version.
    upgrade      Alias for conda update.

optional arguments:
  -h, --help     Show this help message and exit.
  -V, --version  Show the conda version number and exit.

conda commands available from other packages:
  build
  convert
  debug
  develop
  env
  index
  inspect
  metapackage
  render
  server
  skeleton
  verify

C:\Users\melendez\anaconda3>conda info --envs
# conda environments:
#
base                  *  C:\Users\melendez\anaconda3
testenv                  C:\Users\melendez\anaconda3\envs\testenv


C:\Users\melendez\anaconda3>conda list -n base
# packages in environment at C:\Users\melendez\anaconda3:
#
# Name                    Version                   Build  Channel
_ipyw_jlab_nb_ext_conf    0.1.0                    py37_0
alabaster                 0.7.12                   py37_0
anaconda                  2020.02                  py37_0
anaconda-client           1.7.2                    py37_0
anaconda-navigator        1.9.12                   py37_0
anaconda-project          0.8.4                      py_0
argh                      0.26.2                   py37_0
asn1crypto                1.3.0                    py37_0
astroid                   2.3.3                    py37_0
astropy                   4.0              py37he774522_0
atomicwrites              1.3.0                    py37_1
attrs                     19.3.0                     py_0
autopep8                  1.4.4                      py_0
babel                     2.8.0                      py_0
backcall                  0.1.0                    py37_0
backports                 1.0                        py_2
backports.functools_lru_cache 1.6.1                      py_0
backports.shutil_get_terminal_size 1.0.0                    py37_2
backports.tempfile        1.0                        py_1
backports.weakref         1.0.post1                  py_1
bcrypt                    3.1.7            py37he774522_0
beautifulsoup4            4.8.2                    py37_0
bitarray                  1.2.1            py37he774522_0
bkcharts                  0.2                      py37_0
blas                      1.0                         mkl
bleach                    3.1.0                    py37_0
blosc                     1.16.3               h7bd577a_0
bokeh                     1.4.0                    py37_0
boto                      2.49.0                   py37_0
bottleneck                1.3.2            py37h2a96729_0
bzip2                     1.0.8                he774522_0
ca-certificates           2020.1.1                      0
certifi                   2019.11.28               py37_0
cffi                      1.14.0           py37h7a1dbc1_0
chardet                   3.0.4                 py37_1003
click                     7.0                      py37_0
cloudpickle               1.3.0                      py_0
clyent                    1.2.2                    py37_1
colorama                  0.4.3                      py_0
comtypes                  1.1.7                    py37_0
conda                     4.8.2                    py37_0
conda-build               3.18.11                  py37_0
conda-env                 2.6.0                         1
conda-package-handling    1.6.0            py37h62dcd97_0
conda-verify              3.4.2                      py_1
console_shortcut          0.1.1                         4
contextlib2               0.6.0.post1                py_0
cryptography              2.8              py37h7a1dbc1_0
curl                      7.68.0               h2a8f88b_0
cycler                    0.10.0                   py37_0
cython                    0.29.15          py37ha925a31_0
cytoolz                   0.10.1           py37he774522_0
dask                      2.11.0                     py_0
dask-core                 2.11.0                     py_0
decorator                 4.4.1                      py_0
defusedxml                0.6.0                      py_0
diff-match-patch          20181111                   py_0
distributed               2.11.0                   py37_0
docutils                  0.16                     py37_0
entrypoints               0.3                      py37_0
et_xmlfile                1.0.1                    py37_0
fastcache                 1.1.0            py37he774522_0
filelock                  3.0.12                     py_0
flake8                    3.7.9                    py37_0
flask                     1.1.1                      py_0
freetype                  2.9.1                ha9979f8_1
fsspec                    0.6.2                      py_0
future                    0.18.2                   py37_0
get_terminal_size         1.0.0                h38e98db_0
gevent                    1.4.0            py37he774522_0
glob2                     0.7                        py_0
greenlet                  0.4.15           py37hfa6e2cd_0
h5py                      2.10.0           py37h5e291fa_0
hdf5                      1.10.4               h7ebc959_0
heapdict                  1.0.1                      py_0
html5lib                  1.0.1                    py37_0
hypothesis                5.5.4                      py_0
icc_rt                    2019.0.0             h0cc432a_1
icu                       58.2                 ha66f8fd_1
idna                      2.8                      py37_0
imageio                   2.6.1                    py37_0
imagesize                 1.2.0                      py_0
importlib_metadata        1.5.0                    py37_0
intel-openmp              2020.0                      166
intervaltree              3.0.2                      py_0
ipykernel                 5.1.4            py37h39e3cac_0
ipython                   7.12.0           py37h5ca1d4c_0
ipython_genutils          0.2.0                    py37_0
ipywidgets                7.5.1                      py_0
isort                     4.3.21                   py37_0
itsdangerous              1.1.0                    py37_0
jdcal                     1.4.1                      py_0
jedi                      0.14.1                   py37_0
jinja2                    2.11.1                     py_0
joblib                    0.14.1                     py_0
jpeg                      9b                   hb83a4c4_2
json5                     0.9.1                      py_0
jsonschema                3.2.0                    py37_0
jupyter                   1.0.0                    py37_7
jupyter_client            5.3.4                    py37_0
jupyter_console           6.1.0                      py_0
jupyter_core              4.6.1                    py37_0
jupyterlab                1.2.6              pyhf63ae98_0
jupyterlab_server         1.0.6                      py_0
keyring                   21.1.0                   py37_0
kiwisolver                1.1.0            py37ha925a31_0
krb5                      1.17.1               hc04afaa_0
lazy-object-proxy         1.4.3            py37he774522_0
libarchive                3.3.3                h0643e63_5
libcurl                   7.68.0               h2a8f88b_0
libiconv                  1.15                 h1df5818_7
liblief                   0.9.0                ha925a31_2
libpng                    1.6.37               h2a8f88b_0
libsodium                 1.0.16               h9d3ae62_0
libspatialindex           1.9.3                h33f27b4_0
libssh2                   1.8.2                h7a1dbc1_0
libtiff                   4.1.0                h56a325e_0
libxml2                   2.9.9                h464c3ec_0
libxslt                   1.1.33               h579f668_0
llvmlite                  0.31.0           py37ha925a31_0
locket                    0.2.0                    py37_1
lxml                      4.5.0            py37h1350720_0
lz4-c                     1.8.1.2              h2fa13f4_0
lzo                       2.10                 h6df0209_2
m2w64-gcc-libgfortran     5.3.0                         6
m2w64-gcc-libs            5.3.0                         7
m2w64-gcc-libs-core       5.3.0                         7
m2w64-gmp                 6.1.0                         2
m2w64-libwinpthread-git   5.0.0.4634.697f757               2
markupsafe                1.1.1            py37he774522_0
matplotlib                3.1.3                    py37_0
matplotlib-base           3.1.3            py37h64f37c6_0
mccabe                    0.6.1                    py37_1
menuinst                  1.4.16           py37he774522_0
mistune                   0.8.4            py37he774522_0
mkl                       2020.0                      166
mkl-service               2.3.0            py37hb782905_0
mkl_fft                   1.0.15           py37h14836fe_0
mkl_random                1.1.0            py37h675688f_0
mock                      4.0.1                      py_0
more-itertools            8.2.0                      py_0
mpmath                    1.1.0                    py37_0
msgpack-python            0.6.1            py37h74a9793_1
msys2-conda-epoch         20160418                      1
multipledispatch          0.6.0                    py37_0
navigator-updater         0.2.1                    py37_0
nbconvert                 5.6.1                    py37_0
nbformat                  5.0.4                      py_0
networkx                  2.4                        py_0
nltk                      3.4.5                    py37_0
nose                      1.3.7                    py37_2
notebook                  6.0.3                    py37_0
numba                     0.48.0           py37h47e9c7a_0
numexpr                   2.7.1            py37h25d0782_0
numpy                     1.18.1           py37h93ca92e_0
numpy-base                1.18.1           py37hc3f5095_1
numpydoc                  0.9.2                      py_0
olefile                   0.46                     py37_0
openpyxl                  3.0.3                      py_0
openssl                   1.1.1d               he774522_4
packaging                 20.1                       py_0
pandas                    1.0.1            py37h47e9c7a_0
pandoc                    2.2.3.2                       0
pandocfilters             1.4.2                    py37_1
paramiko                  2.7.1                      py_0
parso                     0.5.2                      py_0
partd                     1.1.0                      py_0
path                      13.1.0                   py37_0
path.py                   12.4.0                        0
pathlib2                  2.3.5                    py37_0
pathtools                 0.1.2                      py_1
patsy                     0.5.1                    py37_0
pep8                      1.7.1                    py37_0
pexpect                   4.8.0                    py37_0
pickleshare               0.7.5                    py37_0
pillow                    7.0.0            py37hcc1f983_0
pip                       20.0.2                   py37_1
pkginfo                   1.5.0.1                  py37_0
pluggy                    0.13.1                   py37_0
ply                       3.11                     py37_0
powershell_shortcut       0.0.1                         3
prometheus_client         0.7.1                      py_0
prompt_toolkit            3.0.3                      py_0
psutil                    5.6.7            py37he774522_0
py                        1.8.1                      py_0
py-lief                   0.9.0            py37ha925a31_2
pycodestyle               2.5.0                    py37_0
pycosat                   0.6.3            py37he774522_0
pycparser                 2.19                     py37_0
pycrypto                  2.6.1            py37hfa6e2cd_9
pycurl                    7.43.0.5         py37h7a1dbc1_0
pydocstyle                4.0.1                      py_0
pyflakes                  2.1.1                    py37_0
pygments                  2.5.2                      py_0
pylint                    2.4.4                    py37_0
pynacl                    1.3.0            py37h62dcd97_0
pyodbc                    4.0.30           py37ha925a31_0
pyopenssl                 19.1.0                   py37_0
pyparsing                 2.4.6                      py_0
pyqt                      5.9.2            py37h6538335_2
pyreadline                2.1                      py37_1
pyrsistent                0.15.7           py37he774522_0
pysocks                   1.7.1                    py37_0
pytables                  3.6.1            py37h1da0976_0
pytest                    5.3.5                    py37_0
pytest-arraydiff          0.3              py37h39e3cac_0
pytest-astropy            0.8.0                      py_0
pytest-astropy-header     0.1.2                      py_0
pytest-doctestplus        0.5.0                      py_0
pytest-openfiles          0.4.0                      py_0
pytest-remotedata         0.3.2                    py37_0
python                    3.7.6                h60c2a47_2
python-dateutil           2.8.1                      py_0
python-jsonrpc-server     0.3.4                      py_0
python-language-server    0.31.7                   py37_0
python-libarchive-c       2.8                     py37_13
pytz                      2019.3                     py_0
pywavelets                1.1.1            py37he774522_0
pywin32                   227              py37he774522_1
pywin32-ctypes            0.2.0                 py37_1000
pywinpty                  0.5.7                    py37_0
pyyaml                    5.3              py37he774522_0
pyzmq                     18.1.1           py37ha925a31_0
qdarkstyle                2.8                        py_0
qt                        5.9.7            vc14h73c81de_0
qtawesome                 0.6.1                      py_0
qtconsole                 4.6.0                      py_1
qtpy                      1.9.0                      py_0
requests                  2.22.0                   py37_1
rope                      0.16.0                     py_0
rtree                     0.9.3            py37h21ff451_0
ruamel_yaml               0.15.87          py37he774522_0
scikit-image              0.16.2           py37h47e9c7a_0
scikit-learn              0.22.1           py37h6288b17_0
scipy                     1.4.1            py37h9439919_0
seaborn                   0.10.0                     py_0
send2trash                1.5.0                    py37_0
setuptools                45.2.0                   py37_0
simplegeneric             0.8.1                    py37_2
singledispatch            3.4.0.3                  py37_0
sip                       4.19.8           py37h6538335_0
six                       1.14.0                   py37_0
snappy                    1.1.7                h777316e_3
snowballstemmer           2.0.0                      py_0
sortedcollections         1.1.2                    py37_0
sortedcontainers          2.1.0                    py37_0
soupsieve                 1.9.5                    py37_0
sphinx                    2.4.0                      py_0
sphinxcontrib             1.0                      py37_1
sphinxcontrib-applehelp   1.0.1                      py_0
sphinxcontrib-devhelp     1.0.1                      py_0
sphinxcontrib-htmlhelp    1.0.2                      py_0
sphinxcontrib-jsmath      1.0.1                      py_0
sphinxcontrib-qthelp      1.0.2                      py_0
sphinxcontrib-serializinghtml 1.1.3                      py_0
sphinxcontrib-websupport  1.2.0                      py_0
spyder                    4.0.1                    py37_0
spyder-kernels            1.8.1                    py37_0
sqlalchemy                1.3.13           py37he774522_0
sqlite                    3.31.1               he774522_0
statsmodels               0.11.0           py37he774522_0
sympy                     1.5.1                    py37_0
tbb                       2020.0               h74a9793_0
tblib                     1.6.0                      py_0
terminado                 0.8.3                    py37_0
testpath                  0.4.4                      py_0
tk                        8.6.8                hfa6e2cd_0
toolz                     0.10.0                     py_0
tornado                   6.0.3            py37he774522_3
tqdm                      4.42.1                     py_0
traitlets                 4.3.3                    py37_0
ujson                     1.35             py37hfa6e2cd_0
unicodecsv                0.14.1                   py37_0
urllib3                   1.25.8                   py37_0
vc                        14.1                 h0510ff6_4
vs2015_runtime            14.16.27012          hf0eaf9b_1
watchdog                  0.10.2                   py37_0
wcwidth                   0.1.8                      py_0
webencodings              0.5.1                    py37_1
werkzeug                  1.0.0                      py_0
wheel                     0.34.2                   py37_0
widgetsnbextension        3.5.1                    py37_0
win_inet_pton             1.1.0                    py37_0
win_unicode_console       0.5                      py37_0
wincertstore              0.2                      py37_0
winpty                    0.4.3                         4
wrapt                     1.11.2           py37he774522_0
xlrd                      1.2.0                    py37_0
xlsxwriter                1.2.7                      py_0
xlwings                   0.17.1                   py37_0
xlwt                      1.3.0                    py37_0
xmltodict                 0.12.0                     py_0
xz                        5.2.4                h2fa13f4_4
yaml                      0.1.7                hc54c509_2
yapf                      0.28.0                     py_0
zeromq                    4.3.1                h33f27b4_3
zict                      1.0.0                      py_0
zipp                      2.2.0                      py_0
zlib                      1.2.11               h62dcd97_3
zstd                      1.3.7                h508b16e_0

C:\Users\melendez\anaconda3>conda list -n base numpy
# packages in environment at C:\Users\melendez\anaconda3:
#
# Name                    Version                   Build  Channel
numpy                     1.18.1           py37h93ca92e_0
numpy-base                1.18.1           py37hc3f5095_1
numpydoc                  0.9.2                      py_0

C:\Users\melendez\anaconda3>conda activate base

(base) C:\Users\melendez\anaconda3>cd Scripts

(base) C:\Users\melendez\anaconda3\Scripts>ipython
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: my_arr = np.arange(1000000)

In [3]: my_list = list(range(1000000))

In [4]: %time for _ in range(10):
Traceback (most recent call last):

  File "C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 3331, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)

  File "<ipython-input-4-d6a4bf57eedd>", line 1, in <module>
    get_ipython().run_line_magic('time', 'for _ in range(10):')

  File "C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 2317, in run_line_magic
    result = fn(*args, **kwargs)

  File "<C:\Users\melendez\anaconda3\lib\site-packages\decorator.py:decorator-gen-62>", line 2, in time

  File "C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\magic.py", line 187, in <lambda>
    call = lambda f, *a, **k: f(*a, **k)

  File "C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\magics\execution.py", line 1268, in time
    expr_ast = self.shell.compile.ast_parse(expr)

  File "C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\compilerop.py", line 101, in ast_parse
    return compile(source, filename, symbol, self.flags | PyCF_ONLY_AST, 1)

  File "<unknown>", line 1
    for _ in range(10):
                       ^
SyntaxError: unexpected EOF while parsing


In [5]: %time for _ in range(10): my_arr2 = my_arr * 2
Wall time: 61 ms

In [6]: %time for _ in range(10): my_list2 = [x * 2 for x in my_list]
Wall time: 1.57 s

In [7]: data = np.random.randn(2,3)

In [8]: data
Out[8]:
array([[-0.70014694, -0.93806524,  1.98900217],
       [-1.70299469,  1.14665012, -0.47732725]])

In [9]: data * 10
Out[9]:
array([[ -7.00146937,  -9.38065238,  19.89002169],
       [-17.02994689,  11.46650116,  -4.77327253]])

In [10]: data + data
Out[10]:
array([[-1.40029387, -1.87613048,  3.97800434],
       [-3.40598938,  2.29330023, -0.95465451]])

In [11]: data.shape
Out[11]: (2, 3)

In [12]: data.type
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-12-0af1fa900cec> in <module>
----> 1 data.type

AttributeError: 'numpy.ndarray' object has no attribute 'type'

In [13]: data.dtype
Out[13]: dtype('float64')

In [14]: data1 = [6, 7.5, 8, 0, 1 ]

In [15]: arr1 = np.array(data1)

In [16]: arr1
Out[16]: array([6. , 7.5, 8. , 0. , 1. ])

In [17]: data2 = [[1,2,3,4], [5,6,7,8]]

In [18]: arr2=np.array(data2)

In [19]: arr2
Out[19]:
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])

In [20]: arr2.ndim
Out[20]: 2

In [21]: arr2.shape
Out[21]: (2, 4)

In [22]: arr2.datatype
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-22-bc6fc8d2df3c> in <module>
----> 1 arr2.datatype

AttributeError: 'numpy.ndarray' object has no attribute 'datatype'

In [23]: arr2.dtype
Out[23]: dtype('int32')

In [24]: np.zeros(10)
Out[24]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

In [25]: np.zeros((3,6))
Out[25]:
array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])

In [26]: np.empty((2,3,2))
Out[26]:
array([[[0., 0.],
        [0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.],
        [0., 0.]]])

In [27]: np.arange(15)
Out[27]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])

In [28]: arr1 = np.array([1,2,3], dtype=np.float64)

In [29]: arr2 = np.array([1,2,3], dtype=np.int32)

In [30]: arr1.dtype
Out[30]: dtype('float64')

In [31]: arr2.dtype
Out[31]: dtype('int32')

In [32]: arr1 = np.array([1,2,3,4,5])

In [33]: arr1.dtype
Out[33]: dtype('int32')

In [34]: floar_arr = arr1.astype(np.float64)

In [35]: floar_arr.dtype
Out[35]: dtype('float64')

In [36]: arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])

In [37]: arr
Out[37]: array([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])

In [38]: arr.astype(np.int32)
Out[38]: array([ 3, -1, -2,  0, 12, 10])

In [39]: numeric_strings = np.array(['1.2', '5', '-9.6', '42'], dtype=np.string_)

In [40]: numeric_strings.astype(float)
Out[40]: array([ 1.2,  5. , -9.6, 42. ])

In [41]: numeric_strings
Out[41]: array([b'1.2', b'5', b'-9.6', b'42'], dtype='|S4')

In [42]: int_array = np.arange(10)

In [43]: int_array
Out[43]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [44]: calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)

In [45]: int_array.astype(calibers.dtype)
Out[45]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [46]: # Aritmetic with Numpy arrays =================================================

In [47]: arr = np.array([[1., 2., 3.], [4., 5., 6.]])

In [48]: arr
Out[48]:
array([[1., 2., 3.],
       [4., 5., 6.]])

In [49]: arr * arr
Out[49]:
array([[ 1.,  4.,  9.],
       [16., 25., 36.]])

In [50]: arr - arr
Out[50]:
array([[0., 0., 0.],
       [0., 0., 0.]])

In [51]: 1 / arr
Out[51]:
array([[1.        , 0.5       , 0.33333333],
       [0.25      , 0.2       , 0.16666667]])

In [52]: arr ** 0.5
Out[52]:
array([[1.        , 1.41421356, 1.73205081],
       [2.        , 2.23606798, 2.44948974]])

In [53]: arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])

In [54]: arr2 > arr
Out[54]:
array([[False,  True, False],
       [ True, False,  True]])

In [55]: arr = np.arange(10)

In [56]: arr
Out[56]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [57]: arr[5]
Out[57]: 5

In [58]: arr[5:8]
Out[58]: array([5, 6, 7])

In [59]: arr[5:8]
Out[59]: array([5, 6, 7])

In [60]: arr[5:8]=12

In [61]: arr
Out[61]: array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])

In [62]: arr_slice = arr[5:8]

In [63]: arr_slice
Out[63]: array([12, 12, 12])

In [64]: arr_slice[1] = 12345

In [65]: arr
Out[65]:
array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
           9])

In [66]: arr2d = np.array([[1,2,3], [4,5,6], [7,8,9]])

In [67]: arr2d[0][2]
Out[67]: 3

In [68]: arr2d[0,2]
Out[68]: 3

In [69]: arr3d = np.array([[[1,2,3], [4,5,6]],[[7,8,9],[10,11,12]]])

In [70]: arr3d
Out[70]:
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [71]: arr3d[0]
Out[71]:
array([[1, 2, 3],
       [4, 5, 6]])

In [72]: old_values = arr3d[0].copy()

In [73]: arr3d[0] = 42

In [74]: arr3d
Out[74]:
array([[[42, 42, 42],
        [42, 42, 42]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [75]: arr3d[0] = old_values

In [76]: arr3d
Out[76]:
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [77]: arr3d[1,0]
Out[77]: array([7, 8, 9])

In [78]: arr3d[1,1]
Out[78]: array([10, 11, 12])

In [79]: arr
Out[79]:
array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
           9])

In [80]: arr[1:6]
Out[80]: array([ 1,  2,  3,  4, 12])

In [81]: arr2d
Out[81]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [82]: arr2d[:2]
Out[82]:
array([[1, 2, 3],
       [4, 5, 6]])

In [83]: arr2d[:2,1:]
Out[83]:
array([[2, 3],
       [5, 6]])

In [84]: arr2d[1,:2]
Out[84]: array([4, 5])

In [85]: arr2d[:2, 2]
Out[85]: array([3, 6])

In [86]: arr2d[:,:1]
Out[86]:
array([[1],
       [4],
       [7]])

In [87]: arr2d[:2,1:] = 0

In [88]: arr2d
Out[88]:
array([[1, 0, 0],
       [4, 0, 0],
       [7, 8, 9]])

In [89]: # Boolean indexing =================================================

In [90]: names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

In [91]: data = np.random.rand(7,4)

In [92]: names
Out[92]: array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')

In [93]: data
Out[93]:
array([[0.2077535 , 0.57512071, 0.59445003, 0.04726219],
       [0.67162939, 0.69732989, 0.3084931 , 0.96581435],
       [0.21814367, 0.37524631, 0.58586194, 0.18249381],
       [0.23457508, 0.66810688, 0.94886308, 0.87530432],
       [0.42391344, 0.83592633, 0.08069729, 0.3033618 ],
       [0.50334337, 0.08601104, 0.51542421, 0.54308234],
       [0.30380146, 0.95476386, 0.96148362, 0.33790877]])

In [94]: names == 'Bob'
Out[94]: array([ True, False, False,  True, False, False, False])

In [95]: data[names == 'Bob']
Out[95]:
array([[0.2077535 , 0.57512071, 0.59445003, 0.04726219],
       [0.23457508, 0.66810688, 0.94886308, 0.87530432]])

In [96]: data[names == 'Bob', 2:]
Out[96]:
array([[0.59445003, 0.04726219],
       [0.94886308, 0.87530432]])

In [97]: data[names == 'Bob', 3]
Out[97]: array([0.04726219, 0.87530432])

In [98]: names != 'Bob'
Out[98]: array([False,  True,  True, False,  True,  True,  True])

In [99]: data[~(names == 'Bob')]
Out[99]:
array([[0.67162939, 0.69732989, 0.3084931 , 0.96581435],
       [0.21814367, 0.37524631, 0.58586194, 0.18249381],
       [0.42391344, 0.83592633, 0.08069729, 0.3033618 ],
       [0.50334337, 0.08601104, 0.51542421, 0.54308234],
       [0.30380146, 0.95476386, 0.96148362, 0.33790877]])

In [100]: cond = names =='Bob'

In [101]: data[~cond]
Out[101]:
array([[0.67162939, 0.69732989, 0.3084931 , 0.96581435],
       [0.21814367, 0.37524631, 0.58586194, 0.18249381],
       [0.42391344, 0.83592633, 0.08069729, 0.3033618 ],
       [0.50334337, 0.08601104, 0.51542421, 0.54308234],
       [0.30380146, 0.95476386, 0.96148362, 0.33790877]])

In [102]: mask = (names =='Bob') | (names == 'Will')

In [103]: mask
Out[103]: array([ True, False,  True,  True,  True, False, False])

In [104]: data[mask]
Out[104]:
array([[0.2077535 , 0.57512071, 0.59445003, 0.04726219],
       [0.21814367, 0.37524631, 0.58586194, 0.18249381],
       [0.23457508, 0.66810688, 0.94886308, 0.87530432],
       [0.42391344, 0.83592633, 0.08069729, 0.3033618 ]])

In [105]: data[data < 0] = 0

In [106]: data
Out[106]:
array([[0.2077535 , 0.57512071, 0.59445003, 0.04726219],
       [0.67162939, 0.69732989, 0.3084931 , 0.96581435],
       [0.21814367, 0.37524631, 0.58586194, 0.18249381],
       [0.23457508, 0.66810688, 0.94886308, 0.87530432],
       [0.42391344, 0.83592633, 0.08069729, 0.3033618 ],
       [0.50334337, 0.08601104, 0.51542421, 0.54308234],
       [0.30380146, 0.95476386, 0.96148362, 0.33790877]])

In [107]: data[names != 'Joe']=7

In [108]: data
Out[108]:
array([[7.        , 7.        , 7.        , 7.        ],
       [0.67162939, 0.69732989, 0.3084931 , 0.96581435],
       [7.        , 7.        , 7.        , 7.        ],
       [7.        , 7.        , 7.        , 7.        ],
       [7.        , 7.        , 7.        , 7.        ],
       [0.50334337, 0.08601104, 0.51542421, 0.54308234],
       [0.30380146, 0.95476386, 0.96148362, 0.33790877]])

In [109]: # Fancy Indexing ===================================================

In [110]: arr = np.empty((8,4))

In [111]: for i in range(8):
     ...:     arr[i] = i
     ...:

In [112]: arr
Out[112]:
array([[0., 0., 0., 0.],
       [1., 1., 1., 1.],
       [2., 2., 2., 2.],
       [3., 3., 3., 3.],
       [4., 4., 4., 4.],
       [5., 5., 5., 5.],
       [6., 6., 6., 6.],
       [7., 7., 7., 7.]])

In [113]: arr[[4,3,0,6]]
Out[113]:
array([[4., 4., 4., 4.],
       [3., 3., 3., 3.],
       [0., 0., 0., 0.],
       [6., 6., 6., 6.]])

In [114]: arr[[-3, -5, -7]]
Out[114]:
array([[5., 5., 5., 5.],
       [3., 3., 3., 3.],
       [1., 1., 1., 1.]])

In [115]: arr = np.arange(32).reshape((8,4))

In [116]: arr
Out[116]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [28, 29, 30, 31]])

In [117]: arr[[1,5,7,2], [0,3,1,2]]
Out[117]: array([ 4, 23, 29, 10])

In [118]: arr[[1,5,7,2]][:,[0,3,1,2]]
Out[118]:
array([[ 4,  7,  5,  6],
       [20, 23, 21, 22],
       [28, 31, 29, 30],
       [ 8, 11,  9, 10]])

In [119]: # transporting arrays and swapping Axes ============================================

In [120]: arr = np.arange(15).reshape((3,5))

In [121]: arr
Out[121]:
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])

In [122]: arr.T
Out[122]:
array([[ 0,  5, 10],
       [ 1,  6, 11],
       [ 2,  7, 12],
       [ 3,  8, 13],
       [ 4,  9, 14]])

In [123]: arr = np.random.randn(6,3)

In [124]: arr
Out[124]:
array([[ 0.63192633,  0.90186451,  1.58610802],
       [ 0.64884664,  0.23049   ,  0.88053879],
       [ 0.95603502, -0.74107372,  0.42396194],
       [-0.42835721,  0.1151177 ,  0.48185273],
       [-0.79458524, -0.2762297 ,  0.47202532],
       [-0.87911745,  0.16733588, -0.41462923]])

In [125]: np.dot(arr.T, arr)
Out[125]:
array([[3.32203891, 0.03404082, 1.76199887],
       [0.03404082, 1.53323171, 1.17492288],
       [1.76199887, 1.17492288, 4.09773828]])

In [126]: np.dot(arr.T, arr)
Out[126]:
array([[3.32203891, 0.03404082, 1.76199887],
       [0.03404082, 1.53323171, 1.17492288],
       [1.76199887, 1.17492288, 4.09773828]])

In [127]: arr.t
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-127-9aae8570d7f1> in <module>
----> 1 arr.t

AttributeError: 'numpy.ndarray' object has no attribute 't'

In [128]: arr.T
Out[128]:
array([[ 0.63192633,  0.64884664,  0.95603502, -0.42835721, -0.79458524,
        -0.87911745],
       [ 0.90186451,  0.23049   , -0.74107372,  0.1151177 , -0.2762297 ,
         0.16733588],
       [ 1.58610802,  0.88053879,  0.42396194,  0.48185273,  0.47202532,
        -0.41462923]])

In [129]: arr = np.arange(16).reshape((2,2,4))

In [130]: arr
Out[130]:
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])

In [131]: arr.transpose((1,0,2))
Out[131]:
array([[[ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[ 4,  5,  6,  7],
        [12, 13, 14, 15]]])

In [132]: arr
Out[132]:
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])

In [133]: arr.swapaxes(1,2)
Out[133]:
array([[[ 0,  4],
        [ 1,  5],
        [ 2,  6],
        [ 3,  7]],

       [[ 8, 12],
        [ 9, 13],
        [10, 14],
        [11, 15]]])

In [134]: # Universal functions: Fast Element - Wise Array Functions

In [135]: arr = np.arange(10)

In [136]: arr
Out[136]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [137]: np.sqrt(arr)
Out[137]:
array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])

In [138]: np.exp(arr)
Out[138]:
array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
       2.98095799e+03, 8.10308393e+03])

In [139]: x=np.random.randn(8)

In [140]: y=np.random.randn(8)

In [141]: x
Out[141]:
array([ 0.14146017, -0.75980625, -1.10760972, -1.94033965, -0.0813937 ,
        1.98632837, -1.57033249, -0.20731833])

In [142]: y
Out[142]:
array([ 0.19516904, -0.77436614,  0.02287093,  1.02199496, -0.82267317,
       -3.09202477, -1.08366425,  0.9594061 ])

In [143]: np.maximum(x,y)
Out[143]:
array([ 0.19516904, -0.75980625,  0.02287093,  1.02199496, -0.0813937 ,
        1.98632837, -1.08366425,  0.9594061 ])

In [144]: arr = np.random.randn(7) * 5

In [145]: arr
Out[145]:
array([ 1.2209996 ,  3.87788002,  1.60324313,  7.70463011,  2.43785033,
       -3.97039454,  0.65803165])

In [146]: remainder, whole_part = np.modf(arr)

In [147]: remainder
Out[147]:
array([ 0.2209996 ,  0.87788002,  0.60324313,  0.70463011,  0.43785033,
       -0.97039454,  0.65803165])

In [148]: whole_part
Out[148]: array([ 1.,  3.,  1.,  7.,  2., -3.,  0.])

In [149]: arr
Out[149]:
array([ 1.2209996 ,  3.87788002,  1.60324313,  7.70463011,  2.43785033,
       -3.97039454,  0.65803165])

In [150]: np.sqrt(arr)
C:\Users\melendez\anaconda3\Scripts\ipython:1: RuntimeWarning: invalid value encountered in sqrt
Out[150]:
array([1.10498851, 1.96923336, 1.26619237, 2.77572155, 1.56136169,
              nan, 0.8111915 ])

In [151]: np.sqrt(arr, arr)
C:\Users\melendez\anaconda3\Scripts\ipython:1: RuntimeWarning: invalid value encountered in sqrt
Out[151]:
array([1.10498851, 1.96923336, 1.26619237, 2.77572155, 1.56136169,
              nan, 0.8111915 ])

In [152]: # Array-Oriented Programing with Arrays

In [153]: points=np.arange(-5, 5, 0.01)

In [154]: # 1000 equally spaced points

In [155]: xs, ys = np.meshgrid(points, points)

In [156]: ys
Out[156]:
array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
       ...,
       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])

In [157]: xs
Out[157]:
array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       ...,
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])

In [158]: z= np.sqrt(xs ** 2 + ys ** 2)

In [159]: z
Out[159]:
array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
        7.06400028],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       ...,
       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
        7.04279774],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568]])

In [160]: import matplotlib.pyplot as plt

In [161]: plt.imshow(z, cmap=plt.cm.gray); plt.colorbar()
Out[161]: <matplotlib.colorbar.Colorbar at 0x2235a824088>

In [162]: plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of values")
Out[162]: Text(0.5, 1.0, 'Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values')

In [163]: # Expressing conditional logic as array operations

In [164]: xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])

In [165]: yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])

In [166]: cond = np.array([True, False, True, True, False])

In [167]: result = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]

In [168]: result
Out[168]: [1.1, 2.2, 1.3, 1.4, 2.5]

In [169]: xarr[1]
Out[169]: 1.2

In [170]: result = np.where(cond, xarr, yarr)

In [171]: result
Out[171]: array([1.1, 2.2, 1.3, 1.4, 2.5])

In [172]: arr = np.rango.randn(4,4)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-172-e5fef8a2c6f8> in <module>
----> 1 arr = np.rango.randn(4,4)

~\anaconda3\lib\site-packages\numpy\__init__.py in __getattr__(attr)
    218             else:
    219                 raise AttributeError("module {!r} has no attribute "
--> 220                                      "{!r}".format(__name__, attr))
    221
    222         def __dir__():

AttributeError: module 'numpy' has no attribute 'rango'

In [173]: arr = np.random.randn(4,4)

In [174]: arr
Out[174]:
array([[ 2.22232779,  0.30862207,  0.14280143, -0.11952566],
       [-0.44757951,  0.60553105, -0.17906496,  1.02628318],
       [ 1.65239207,  1.80281658,  1.15720472, -0.98450997],
       [-0.85256932,  0.32527908, -0.46367594, -0.83694366]])

In [175]: arr > 0
Out[175]:
array([[ True,  True,  True, False],
       [False,  True, False,  True],
       [ True,  True,  True, False],
       [False,  True, False, False]])

In [176]: np.where(arr > 0, 2, -2)
Out[176]:
array([[ 2,  2,  2, -2],
       [-2,  2, -2,  2],
       [ 2,  2,  2, -2],
       [-2,  2, -2, -2]])

In [177]: np.where(arr > 0, 2, arr) # set only positive values to 2
Out[177]:
array([[ 2.        ,  2.        ,  2.        , -0.11952566],
       [-0.44757951,  2.        , -0.17906496,  2.        ],
       [ 2.        ,  2.        ,  2.        , -0.98450997],
       [-0.85256932,  2.        , -0.46367594, -0.83694366]])

In [178]: # Matematical and statistical methods

In [179]: arr = np.random.randn(5,4)

In [180]: arr
Out[180]:
array([[ 0.71782363,  0.79107805,  1.04656788, -0.40371084],
       [ 0.52620876, -0.57625385, -0.62682435, -0.09491229],
       [-0.30403919,  1.6806706 ,  0.67155184,  1.39007454],
       [ 0.53666581, -0.37939534,  1.59550903, -0.682973  ],
       [-0.20545041, -0.82429859,  0.26825276, -0.72543698]])

In [181]: arr.mean()
Out[181]: 0.22005540336264104

In [182]: np.mean(arr)
Out[182]: 0.22005540336264104

In [183]: arr.sum()
Out[183]: 4.401108067252821

In [184]: arr.mean(axis = 1)
Out[184]: array([ 0.53793968, -0.19294543,  0.85956445,  0.26745163, -0.37173331])

In [185]: # in the before example the function mean get the mean for each group of 4 elements

In [186]: arr.sum(axis=0)
Out[186]: array([ 1.2712086 ,  0.69180087,  2.95505717, -0.51695857])

In [187]: # in the before example sum is applied for each elemto en each row

In [188]: arr = np.array([0,1,2,3,4,5,6,7])

In [189]: arr.cumsum()
Out[189]: array([ 0,  1,  3,  6, 10, 15, 21, 28], dtype=int32)

In [190]: arr=np.array([[0,1,2],[3,4,5],[6,7,8]])

In [191]: arr
Out[191]:
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

In [192]: arr.cumsum(axis=0)
Out[192]:
array([[ 0,  1,  2],
       [ 3,  5,  7],
       [ 9, 12, 15]], dtype=int32)

In [193]: arr.cumprod(axis=1)
Out[193]:
array([[  0,   0,   0],
       [  3,  12,  60],
       [  6,  42, 336]], dtype=int32)

In [194]: #Methods for boolean arrays ========================================

In [195]: arr = np.random.randn(100)

In [196]: (arr > 0).sum()  # Number of positive values
Out[196]: 49

In [197]: bools = np.array([False, False, True, False])

In [198]: bools.any()
Out[198]: True

In [199]: bools.all()
Out[199]: False

In [200]: arr = np.random.randn(6)

In [201]:

In [201]: arr
Out[201]:
array([-1.644721  ,  0.70735801,  1.59216775,  0.87968817, -0.28167737,
       -0.19696643])

In [202]: arr.sort()

In [203]: arr
Out[203]:
array([-1.644721  , -0.28167737, -0.19696643,  0.70735801,  0.87968817,
        1.59216775])

In [204]: arr = np.random.randn(5,3)

In [205]: arr
Out[205]:
array([[-1.38073292,  0.65122573,  0.91130965],
       [-1.33430635,  1.23335136,  0.50411744],
       [-0.23631054,  0.10663639,  1.14016227],
       [ 0.8434126 , -0.49192487, -0.93395514],
       [ 0.71228742,  0.08482431,  0.36932105]])

In [206]: arr.sort(1)

In [207]: arr
Out[207]:
array([[-1.38073292,  0.65122573,  0.91130965],
       [-1.33430635,  0.50411744,  1.23335136],
       [-0.23631054,  0.10663639,  1.14016227],
       [-0.93395514, -0.49192487,  0.8434126 ],
       [ 0.08482431,  0.36932105,  0.71228742]])

In [208]: # Unique and Other set logic

In [209]: names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])

In [210]: np.unique(names)
Out[210]: array(['Bob', 'Joe', 'Will'], dtype='<U4')

In [211]: sorted(set(names))
Out[211]: ['Bob', 'Joe', 'Will']

In [212]: values = np.array([6,0,0,3,2,5,6])

In [213]: np.in1d(values, [2,3,6])
Out[213]: array([ True, False, False,  True,  True, False,  True])

In [214]: # FILE INPUT AND OUTPUT WITH ARRAYS ===============================================

In [215]: #### Pending ==============================

In [216]:                                                                                                               