Microsoft Windows [VersiÃ³n 10.0.18362.720]
(c) 2019 Microsoft Corporation. Todos los derechos reservados.

C:\Users\melendez>cd c:\Users\melendez\anaconda3\Scripts

c:\Users\melendez\anaconda3\Scripts>ipython
c:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: tup = 4, 5, 6

In [2]: tup
Out[2]: (4, 5, 6)

In [3]: nested_tup = (4, 5, 6), (7, 8)

In [4]: nested_tup
Out[4]: ((4, 5, 6), (7, 8))

In [5]: tuple([4, 0, 2])
Out[5]: (4, 0, 2)

In [6]: tup = tuple('string')

In [7]: tup
Out[7]: ('s', 't', 'r', 'i', 'n', 'g')

In [8]: tup[0]
Out[8]: 's'

In [9]: tup = tuple(['foo',[1, 2], True])

In [10]: tup[2] = False
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-10-b89d0c4ae599> in <module>
----> 1 tup[2] = False

TypeError: 'tuple' object does not support item assignment

In [11]: tup[1].append(3)

In [12]: tup
Out[12]: ('foo', [1, 2, 3], True)

In [13]: (4, None, 'foo') + (6, 0) + ('bar',)
Out[13]: (4, None, 'foo', 6, 0, 'bar')

In [14]: ('foo', 'bar') * 4
Out[14]: ('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')

In [15]: tup = (4, 5, 6)

In [16]: a, b, c = tup

In [17]: a
Out[17]: 4

In [18]: b
Out[18]: 5

In [19]: c
Out[19]: 6

In [20]: tup = 4, 5, (6, 7)

In [21]: a, b, (c, d) = tup

In [22]: d
Out[22]: 7

In [23]: # swap variables

In [24]: a, b = 1, 2

In [25]: a
Out[25]: 1

In [26]: b
Out[26]: 2

In [27]: b, a = a, b

In [28]: a
Out[28]: 2

In [29]: b
Out[29]: 1

In [30]: seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]

In [31]: for a, b, c in seq:
    ...:     print('a={0}, b{1}, c{2}'.format(a, b, c))
    ...:
a=1, b2, c3
a=4, b5, c6
a=7, b8, c9

In [32]: values = 1, 2, 3, 4, 5

In [33]: a, b, *rest = values

In [34]: a, b
Out[34]: (1, 2)

In [35]: rest
Out[35]: [3, 4, 5]

In [36]: values
Out[36]: (1, 2, 3, 4, 5)

In [37]: a = (1, 2, 2, 2, 3, 4, 2)

In [38]: a.count(2)
Out[38]: 4

In [39]: # LIST

In [40]: #==========================================================

In [41]: a_list = [2, 3, 7, None]

In [42]: tup = ('foo', 'bar', 'baz')

In [43]: b_list = list(tup)

In [44]: b_list
Out[44]: ['foo', 'bar', 'baz']

In [45]: b_list[1] = 'peekaboo'

In [46]: b_list
Out[46]: ['foo', 'peekaboo', 'baz']

In [47]: gen = range(10)

In [48]: gen
Out[48]: range(0, 10)

In [49]: list(gen)
Out[49]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [50]: b_list.append('dwarf')

In [51]: b_list
Out[51]: ['foo', 'peekaboo', 'baz', 'dwarf']

In [52]: b_list.insert(1, 'red')

In [53]: b_list
Out[53]: ['foo', 'red', 'peekaboo', 'baz', 'dwarf']

In [54]: b_list.pop(2)
Out[54]: 'peekaboo'

In [55]: b_list
Out[55]: ['foo', 'red', 'baz', 'dwarf']

In [56]: b_list.append('foo')

In [57]: b_list
Out[57]: ['foo', 'red', 'baz', 'dwarf', 'foo']

In [58]: b_list.remove('foo')

In [59]: b_list
Out[59]: ['red', 'baz', 'dwarf', 'foo']

In [60]: dwarf in b_list
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-60-fe5ebebd0dee> in <module>
----> 1 dwarf in b_list

NameError: name 'dwarf' is not defined

In [61]: 'dwarf' in b_list
Out[61]: True

In [62]: [4, None, 'foo'] + [7, 8, (2, 3)]
Out[62]: [4, None, 'foo', 7, 8, (2, 3)]

In [63]: x = [4, None, 'foo']

In [64]: x.extend([7, 8, (2, 3)])

In [65]: x
Out[65]: [4, None, 'foo', 7, 8, (2, 3)]

In [66]: a = [7, 2, 5, 1, 3]

In [67]: a.sort()

In [68]: a
Out[68]: [1, 2, 3, 5, 7]

In [69]: b = ['saw', 'small', 'He', 'foxes', 'six']

In [70]: b.sort(key=len)

In [71]: b
Out[71]: ['He', 'saw', 'six', 'small', 'foxes']

In [72]: import bisect

In [73]: c = [1, 2, 2, 2, 3, 4, 7]

In [74]: bisect.bisect(c, 2)
Out[74]: 4

In [75]: bisect.bisect(c, 5)
Out[75]: 6

In [76]: bisect.insort(c, 6)

In [77]: c
Out[77]: [1, 2, 2, 2, 3, 4, 6, 7]

In [78]: # SLICING ================

In [79]: seq = [7, 2, 3, 7, 5, 6, 0, 1]

In [80]: seq[1:5]
Out[80]: [2, 3, 7, 5]

In [81]: seq[3:4] = [6, 3]

In [82]: seq
Out[82]: [7, 2, 3, 6, 3, 5, 6, 0, 1]

In [83]: seq[:5]
Out[83]: [7, 2, 3, 6, 3]

In [84]: seq[3:]
Out[84]: [6, 3, 5, 6, 0, 1]

In [85]: seq[-4:]
Out[85]: [5, 6, 0, 1]

In [86]: seq[-6:-2]
Out[86]: [6, 3, 5, 6]

In [87]: some_list = ['foo', 'bar', 'baz']

In [88]: mapping = {}

In [89]: for i, v in enumerate(some_list):
    ...:     mapping[v] = i
    ...:

In [90]: mapping
Out[90]: {'foo': 0, 'bar': 1, 'baz': 2}

In [91]: enumerate(some_list)
Out[91]: <enumerate at 0x1f090cd3278>

In [92]: sorted([7, 1, 2, 6, 0, 3, 2])
Out[92]: [0, 1, 2, 2, 3, 6, 7]

In [93]: sorted('horse race')
Out[93]: [' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's']

In [94]: seq1 = ['foo', 'bar', 'baz']

In [95]: seq2 = ['one', 'two', 'three']

In [96]: zipped = zip(seq1, seq2)

In [97]: list(zipped)
Out[97]: [('foo', 'one'), ('bar', 'two'), ('baz', 'three')]

In [98]: zipped
Out[98]: <zip at 0x1f090c70808>

In [99]: seq3 = [False, True]

In [100]: list(zip(seq1, seq2, seq3))
Out[100]: [('foo', 'one', False), ('bar', 'two', True)]

In [101]: for i, (a, b) in enumerate(zip(seq1, seq2)):
     ...:     print('{0}: {1}, {2}'.format(i, a, b))
     ...:
0: foo, one
1: bar, two
2: baz, three

In [102]: # SECOND PART ++++++++++++++++++++++++++++++++++++++++++++++++++++++

In [103]: # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In [104]: pitchers = [('Nolan', 'Ryan'), ('Roger', 'Clemens'), ('Schilling', 'Curt')]

In [105]: first_name, last_names = zip(*pitchers)

In [106]: first_names
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-106-bbd545d1fd2f> in <module>
----> 1 first_names

NameError: name 'first_names' is not defined

In [107]: last_names
Out[107]: ('Ryan', 'Clemens', 'Curt')

In [108]: first_name
Out[108]: ('Nolan', 'Roger', 'Schilling')

In [109]: list(resersed(range(10)))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-109-aa4d4d43797d> in <module>
----> 1 list(resersed(range(10)))

NameError: name 'resersed' is not defined

In [110]: list(reversed(range(10)))
Out[110]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

In [111]: # dict

In [112]: empty_dict = {}

In [113]: d1 = {'a':'Some Value','b':[1, 2, 3, 4]}

In [114]: d1
Out[114]: {'a': 'Some Value', 'b': [1, 2, 3, 4]}

In [115]: d1[7] = 'an integer'

In [116]: d1
Out[116]: {'a': 'Some Value', 'b': [1, 2, 3, 4], 7: 'an integer'}

In [117]: d1['b']
Out[117]: [1, 2, 3, 4]

In [118]: 'b' in d1
Out[118]: True

In [119]: d1[5] = 'some value'

In [120]: d1
Out[120]: {'a': 'Some Value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value'}

In [121]: d1['dummy'] = 'another value'

In [122]: d1
Out[122]:
{'a': 'Some Value',
 'b': [1, 2, 3, 4],
 7: 'an integer',
 5: 'some value',
 'dummy': 'another value'}

In [123]: del d1[5]

In [124]: d1
Out[124]:
{'a': 'Some Value',
 'b': [1, 2, 3, 4],
 7: 'an integer',
 'dummy': 'another value'}

In [125]: ret = d1.pop('dummy')

In [126]: ret
Out[126]: 'another value'

In [127]: d1
Out[127]: {'a': 'Some Value', 'b': [1, 2, 3, 4], 7: 'an integer'}

In [128]: list(d1.keys())
Out[128]: ['a', 'b', 7]

In [129]: list(d1.values())
Out[129]: ['Some Value', [1, 2, 3, 4], 'an integer']

In [130]: d1.update({'b' : 'foo', 'c' : 12})

In [131]: d1
Out[131]: {'a': 'Some Value', 'b': 'foo', 7: 'an integer', 'c': 12}

In [132]: mapping = {}

In [133]: for key, value in zip(key_list, value_list):
     ...:     mapping[key] = value
     ...:
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-133-75886ef5a227> in <module>
----> 1 for key, value in zip(key_list, value_list):
      2     mapping[key] = value
      3

NameError: name 'key_list' is not defined

In [134]: mapping = dict(zip(range(5), reversed(range(5))))

In [135]: mapping
Out[135]: {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}

In [136]: words = ['apple', 'bat', 'bar', 'atom', 'book']

In [137]: by_letter = {}

In [138]: for word in words:
     ...:     letter = word[0]
     ...:     if letter not in by_letter:
     ...:         by_letter[letter] = [word]
     ...:     else
  File "<ipython-input-138-b6f1cddde751>", line 5
    else
        ^
SyntaxError: invalid syntax


In [139]: for word in words:
     ...:     letter = word[0]
     ...:     if letter not in by_letter:
     ...:         by_letter[letter] = [word]
     ...:     else:
     ...:         by_letter[letter].append(word)
     ...:

In [140]: by_letter
Out[140]: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}

In [141]: for word in words:
     ...:     letter = word[0]
     ...:     if letter not in by_letter:
     ...:         by_letter[letter] = [word]
     ...:     else:
     ...:       by_letter[letter].append(word)
     ...:

In [142]: by_letter = {}

In [143]: for word in words:
     ...:     letter = word[0]
     ...:     by_letter.setdefault(letter, []).append(word)
     ...:

In [144]: by_letter
Out[144]: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}

In [145]: by_letter = {}

In [146]: by_letter
Out[146]: {}

In [147]: from collections import defaultdict

In [148]: by_letter = defaultdict(list)

In [149]: for word in words:
     ...:     by_letter[word[0]].append(word)
     ...:

In [150]: by_letter
Out[150]: defaultdict(list, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']})

In [151]: hash('string')
Out[151]: 3446736495351466713

In [152]: hash((1, 2, (2, 3)))
Out[152]: 1097636502276347782

In [153]: hash((1, 2, [2, 3]))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-153-8ffc25aff872> in <module>
----> 1 hash((1, 2, [2, 3]))

TypeError: unhashable type: 'list'

In [154]: d = {}

In [155]: d[tuple([1, 2, 3])] = 5

In [156]: d
Out[156]: {(1, 2, 3): 5}

In [157]: # conjuntos "set" --------------

In [158]: set([2, 2, 2, 1, 3, 3])
Out[158]: {1, 2, 3}

In [159]: {2, 2, 2, 1, 3, 3}
Out[159]: {1, 2, 3}

In [160]: a = {1, 2, 3, 4, 5}

In [161]: b = {3, 4, 5, 6, 7, 8}

In [162]: a.union(b)
Out[162]: {1, 2, 3, 4, 5, 6, 7, 8}

In [163]: a | b
Out[163]: {1, 2, 3, 4, 5, 6, 7, 8}

In [164]: a.intersection(b)
Out[164]: {3, 4, 5}

In [165]: a & b
Out[165]: {3, 4, 5}

In [166]: a
Out[166]: {1, 2, 3, 4, 5}

In [167]: a.intersection_update(b)

In [168]: a
Out[168]: {3, 4, 5}

In [169]: a = {1, 2, 3, 4, 5}

In [170]: c = a.copy()

In [171]: c
Out[171]: {1, 2, 3, 4, 5}

In [172]: c |= b

In [173]: c
Out[173]: {1, 2, 3, 4, 5, 6, 7, 8}

In [174]: d = a.copy()

In [175]: d &= b

In [176]: d
Out[176]: {3, 4, 5}

In [177]: my_data = [1, 2, 3, 4]

In [178]: my_set = {tuple(my_data)}

In [179]: my_set
Out[179]: {(1, 2, 3, 4)}

In [180]: a_set = {1, 2, 3, 4, 5}

In [181]: {1, 2, 3}.issubset(a_set)
Out[181]: True

In [182]: a_set.issuperset({1, 2, 3})
Out[182]: True

In [183]: {1, 2, 8}.issubset(a_set)
Out[183]: False

In [184]: {1, 2, 3} == {1, 2, 3}
Out[184]: True

In [185]: strings = ['a', 'as', 'bat', 'car', 'dove', 'python']

In [186]: [x.upper() for x in strings if len(x) > 2]
Out[186]: ['BAT', 'CAR', 'DOVE', 'PYTHON']

In [187]: unique_lengths = {len(x) for x in strings}

In [188]: unique_lengths
Out[188]: {1, 2, 3, 4, 6}

In [189]: set(map(len, strings))
Out[189]: {1, 2, 3, 4, 6}

In [190]: loc_mapping = {val : index for index, val in enumerate(strings)}

In [191]: loc_mapping
Out[191]: {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}

In [192]: all_data = [['John', 'Emily', 'Michael', 'Mary', 'Steven'], ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar']]

In [193]: names_of_interest = []

In [194]: for names in all_data:
     ...:     enough_es = [name for name in names if name.count('e') >= 2]
     ...:     names_of_interest.extend(enough_es)
     ...:

In [195]: names_of_interest
Out[195]: ['Steven']

In [196]: result = [name for names in all_data for name in names if name.count('e') >= 2]

In [197]: result
Out[197]: ['Steven']

In [198]: # TERCERA PARTE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In [199]: #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In [200]: some_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]

In [201]: flattened = [x for tup in some_tuples for x in tup]

In [202]: flattened
Out[202]: [1, 2, 3, 4, 5, 6, 7, 8, 9]

In [203]: flattened = []

In [204]: for tup in some_tuples:
     ...:     for x in tup:
     ...:         flattened.append(x)
     ...:

In [205]: flattened
Out[205]: [1, 2, 3, 4, 5, 6, 7, 8, 9]

In [206]: [[x for x in tup] for tup in some_tupes]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-206-bbca2f2a214f> in <module>
----> 1 [[x for x in tup] for tup in some_tupes]

NameError: name 'some_tupes' is not defined

In [207]: [[x for x in tup] for tup in some_tuples]
Out[207]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [208]: # Functions ---------------------------------------

In [209]: def my_function(x, y, z=1.5)
  File "<ipython-input-209-122cc2892afe>", line 1
    def my_function(x, y, z=1.5)
                                ^
SyntaxError: invalid syntax


In [210]: def my_function(x, y, z=1.5):
     ...:     if z > 1:
     ...:         return z * (x + y)
     ...:     else:
     ...:         return z / (x + y)
     ...:

In [211]: my_function(5, 6, z=0.7)
Out[211]: 0.06363636363636363

In [212]: my_function(10, 20)
Out[212]: 45.0

In [213]: my_function(x=5, y=6, z=7)
Out[213]: 77

In [214]: my_function(y=6, x=5, z=7)
Out[214]: 77

In [215]: def func():
     ...:     a = []
     ...:     for i in range(5):
     ...:         a.append(i)
     ...:

In [216]: func()

In [217]: a = None

In [218]: def bind_a_variable():
     ...:     global a
     ...:

In [219]: bind_a_variable
Out[219]: <function __main__.bind_a_variable()>

In [220]: def bind_a_variable():
     ...:     global a
     ...:     a = []
     ...: bind_a_variable()

In [221]: print(a)
[]

In [222]: def f():
     ...:     a = 5
     ...:     b = 6
     ...:     c = 7
     ...:     return a, b, c
     ...: a, b, c = f()

In [223]: states = ['   Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda', 'south   carolina##', 'West virginia?']
     ...:

In [224]: import re

In [225]: def clean_strings(strings):
     ...:     result = []
     ...:     for value in strings:
     ...:         value = value.strip()
     ...:         value = re.sub('[!#?]', '', value)
     ...:         value = value.title()
     ...:         result.append(value)
     ...:     return result
     ...:

In [226]: clean_strings(states)
Out[226]:
['Alabama',
 'Georgia',
 'Georgia',
 'Georgia',
 'Florida',
 'South   Carolina',
 'West Virginia']

In [227]: def remove_punctuation(value):
     ...:     return re.sub('[!#?]', '', value)
     ...: clean_ops = [str.strip, remove_punctuation, str.title]

In [228]: def clean_strings(strings. ops):
     ...:     result = []
  File "<ipython-input-228-d5e26d8da78d>", line 1
    def clean_strings(strings. ops):
                             ^
SyntaxError: invalid syntax


In [229]: def clean_strings(strings. ops):
     ...:     result = []
  File "<ipython-input-229-d5e26d8da78d>", line 1
    def clean_strings(strings. ops):
                             ^
SyntaxError: invalid syntax


In [230]: def clean_strings(strings, ops):
     ...:     result = []
     ...:     for value in strings:
     ...:         for function in ops:
     ...:             value = function(value)
     ...:         result.append(value)
     ...:     return result
     ...:
     ...:

In [231]: clean_strings(states, clean_ops)
Out[231]:
['Alabama',
 'Georgia',
 'Georgia',
 'Georgia',
 'Florida',
 'South   Carolina',
 'West Virginia']

In [232]: for x in map(remove_punctuation, states):
     ...:     print(x)
     ...:
   Alabama
Georgia
Georgia
georgia
FlOrIda
south   carolina
West virginia

In [233]: # Lambda Functions -----------------------------

In [234]: def short_function(x):
     ...:     return x * 2
     ...:

In [235]: equiv_anon = lambda x: x * 2

In [236]: def apply_to_list(some_list, f):
     ...:     return [f(x) for x in some_list]
     ...:

In [237]: ints = [4, 0, 1, 5, 6]

In [238]: apply_to_list(ints, lambda x: x * 2)
Out[238]: [8, 0, 2, 10, 12]

In [239]: strings = ['foo', 'card', 'bar', 'aaaa', 'abab']

In [240]: strings.sort(key=lambda x: len(set(list(x))))

In [241]: strings
Out[241]: ['aaaa', 'foo', 'abab', 'bar', 'card']

In [242]: def add_numbers(x, y):
     ...:     return x + y
     ...:

In [243]: add_five = lambda y: add_numbers(5, y)

C:\Python>cd c:\Users\melendez\anaconda3\Scripts

c:\Users\melendez\anaconda3\Scripts>ipython
c:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: def add_numbers(x, y):
   ...:     return x + y
   ...:

In [2]: add_five = lambda y: add_numbers(5, y)

In [3]: add_five(3)
Out[3]: 8

In [4]: from functools import partial

In [5]: add_five = partial(add_numbers, 5)

In [6]: add_five(3)
Out[6]: 8

In [7]: # Generators ---------------------------------

In [8]: some_dict = {'a',: 1, 'b': 2, 'c': 3}
  File "<ipython-input-8-9d6ffd372e74>", line 1
    some_dict = {'a',: 1, 'b': 2, 'c': 3}
                     ^
SyntaxError: invalid syntax


In [9]: some_dict = {'a': 1, 'b': 2, 'c': 3}

In [10]: for key in some_dict:
    ...:     print(key)
    ...:
a
b
c

In [11]: dict_iterator = iter(some_dict)

In [12]: dict_iterator
Out[12]: <dict_keyiterator at 0x24b04b9e368>

In [13]: list(dict_iterator)
Out[13]: ['a', 'b', 'c']

In [14]: def squares(n=10):
    ...:     print('Generating squares from 1 to {0}'.format(n ** 2))
    ...:     for i in range(1, n + 1):
    ...:         yield i ** 2
    ...:

In [15]: gen = squares()

In [16]: gen
Out[16]: <generator object squares at 0x0000024B04B3E048>

In [17]: for x in gen:
    ...:     print(x, end=' ')
    ...:
Generating squares from 1 to 100
1 4 9 16 25 36 49 64 81 100
In [18]: gen = (x ** 2 for x in range(100))

In [19]: gen
Out[19]: <generator object <genexpr> at 0x0000024B040DD148>

In [20]: def _make_gen():
    ...:     for x in range(100):
    ...:         yield x ** 2
    ...:

In [21]: gen = _make_gen()

In [22]: gen
Out[22]: <generator object _make_gen at 0x0000024B040DD448>

In [23]: sum(x ** 2 for x in range(100))
Out[23]: 328350

In [24]: dict((i, i ** 2) for i in range(5))
Out[24]: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}

In [25]: import itertools

In [26]: first_letter = lambda x: x[0]

In [27]: names = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven']

In [28]: for letter, names in itertools.groupby(names, first_letter):
    ...:     print(letter, list(names))   # names is a generator
    ...:
A ['Alan', 'Adam']
W ['Wes', 'Will']
A ['Albert']
S ['Steven']

In [29]: letter
Out[29]: 'S'

In [30]: float('1.2345')
Out[30]: 1.2345

In [31]: float('something')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-31-2649e4ade0e6> in <module>
----> 1 float('something')

ValueError: could not convert string to float: 'something'

In [32]: #   Errors and Exception Handling --------------------------

In [33]: def attempt_float(x):
    ...:     try:
    ...:         return float(x)
    ...:     except:
    ...:         return x
    ...:

In [34]: attemp_float('1.2345')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-34-6373b9c556bc> in <module>
----> 1 attemp_float('1.2345')

NameError: name 'attemp_float' is not defined

In [35]: attempt_float('1.2345')
Out[35]: 1.2345

In [36]: attempt_float('something')
Out[36]: 'something'

In [37]: float((1, 2))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-37-82f777b0e564> in <module>
----> 1 float((1, 2))

TypeError: float() argument must be a string or a number, not 'tuple'

In [38]: def attempt_float(x):
    ...:     try:
    ...:         return float(x)
    ...:     except ValueError:
    ...:         return x
    ...:

In [39]: attempt_float((1, 2))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-39-8b0026e9e6b7> in <module>
----> 1 attempt_float((1, 2))

<ipython-input-38-aeda5597e7c4> in attempt_float(x)
      1 def attempt_float(x):
      2     try:
----> 3         return float(x)
      4     except ValueError:
      5         return x

TypeError: float() argument must be a string or a number, not 'tuple'

In [40]: def attempt_float(x):
    ...:     try:
    ...:         return float(x)
    ...:     except (TypeError, ValueError):
    ...:         return x
    ...:

In [41]:   

C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: f = open(path, 'w')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-4d0e665b6595> in <module>
----> 1 f = open(path, 'w')

NameError: name 'path' is not defined

In [2]: # Files and operating systems =================================

In [3]: # =================================================================

In [4]: path = 'c:/Python/ReadFileTest.txt'

In [5]: f = open(path)
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-5-6f188b001d67> in <module>
----> 1 f = open(path)

FileNotFoundError: [Errno 2] No such file or directory: 'c:/Python/ReadFileTest.txt'

In [6]: f = open(path)

In [7]: for line in f:
   ...:     pass
   ...:     lines = [x.rstrip() for x in open(path)]
   ...: lines
Out[7]:
['Linea 1 #$%#&$%/',
 'Linea 2 esta es una prueba de lectura de archivo en python',
 'Linea 3 STSDGREYTETYDGDFGD',
 'Linea 4 DFGDFGDFHDHDFH$%/%&/%',
 'Linea 5  FIN']

In [8]: f.close(c:/Python/ReadFileTest.txt)
  File "<ipython-input-8-4446e729e852>", line 1
    f.close(c:/Python/ReadFileTest.txt)
             ^
SyntaxError: invalid syntax


In [9]: f.close('c:/Python/ReadFileTest.txt')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-9-840d2bbad455> in <module>
----> 1 f.close('c:/Python/ReadFileTest.txt')

TypeError: close() takes no arguments (1 given)

In [10]: f.close()

In [11]: with open(path) as f:
    ...:     lines = [x.rstrip() for x in f]
    ...:

In [12]: lines
Out[12]:
['Linea 1 #$%#&$%/',
 'Linea 2 esta es una prueba de lectura de archivo en python',
 'Linea 3 STSDGREYTETYDGDFGD',
 'Linea 4 DFGDFGDFHDHDFH$%/%&/%',
 'Linea 5  FIN']

In [13]: f = open(path)

In [14]: f.read(10)
Out[14]: 'Linea 1 #$'

In [15]:       

C:\Users\melendez>cd C:\Users\melendez\anaconda3\Scripts

C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: path = C:\Python\ReadFileTest.txt
  File "<ipython-input-1-1feebe18b4e7>", line 1
    path = C:\Python\ReadFileTest.txt
            ^
SyntaxError: invalid syntax


In [2]: path = 'C:\Python\ReadFileTest.txt'

In [3]: f = open(path)

In [4]: f.read(10)
Out[4]: 'SueÃÂ±a el '

In [5]: f2 = open(path, 'rb')  # binary mode

In [6]: f2.read(10)
Out[6]: b'Sue\xc3\xb1a el '

In [7]: f.tell()
Out[7]: 10

In [8]: f2.tell()
Out[8]: 10

In [9]: import sys

In [10]: sys.getdefaultencoding()
Out[10]: 'utf-8'

In [11]: f.seek(3)
Out[11]: 3

In [12]: f.read(1)
Out[12]: 'Ã'

In [13]: f.close()

In [14]: f2.close()

In [15]: 

--========================================== FILES Continuation ================================
C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: path = 'C:\Python\ReadFileTest.txt'

In [2]: with open(path) as f:
   ...:     lines = [x for x in f]
   ...:

In [3]: lines
Out[3]:
['SueÃÂ±a el rico en su riqueza,\n',
 'que mÃÂ¡s cuidados le ofrece;\n',
 '\n',
 'sueÃÂ±a el pobre que padece,\n',
 'su miseria y su pobreza;\n',
 '\n',
 'sueÃÂ±a el que a medrar empieza,\n',
 'sueÃÂ±a el que afana y pretende,\n',
 'sueÃÂ±a el que agravia y ofende,\n',
 '\n',
 'y en el mundo, en conclusiÃÂ³n,\n',
 'todos sueÃÂ±an lo que son\n',
 'aunque ninguno lo entiende\n',
 '\n']

In [4]: with open(path) as f:
   ...:     lines = [x.rstrip() for x in f]
   ...:
   ...:

In [5]: lines
Out[5]:
['SueÃÂ±a el rico en su riqueza,',
 'que mÃÂ¡s cuidados le ofrece;',
 '',
 'sueÃÂ±a el pobre que padece,',
 'su miseria y su pobreza;',
 '',
 'sueÃÂ±a el que a medrar empieza,',
 'sueÃÂ±a el que afana y pretende,',
 'sueÃÂ±a el que agravia y ofende,',
 '',
 'y en el mundo, en conclusiÃÂ³n,',
 'todos sueÃÂ±an lo que son',
 'aunque ninguno lo entiende',
 '']

In [6]: f=open(path)

In [7]: f.read(10)
Out[7]: 'SueÃÂ±a el '

In [8]: f2 = open(path, 'rb')  # binary mode

In [9]: f2.read(10)
Out[9]: b'Sue\xc3\xb1a el '

In [10]: f.tell()
Out[10]: 10

In [11]: f2.tell()
Out[11]: 10

In [12]: import sys

In [13]: sys.getdefaultencoding()
Out[13]: 'utf-8'

In [14]: f.seek(3)
Out[14]: 3

In [15]: f.read(1)
Out[15]: 'Ã'

In [16]: f.close()

In [17]: f2.close()

In [18]: with open('c:Quit

C:\Users\melendez\anaconda3\Scripts>ipython
C:\Users\melendez\anaconda3\lib\site-packages\IPython\core\history.py:226: UserWarning: IPython History requires SQLite, your history will not be saved
  warn("IPython History requires SQLite, your history will not be saved")
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: path = 'C:\Python\ReadFileTest.txt'

In [2]: with open('c:\tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-2-2ef8cd10e419> in <module>
----> 1 with open('c:\tmp.txt', 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'c:\tmp.txt'

In [3]: with open('C:\tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-3-71b9cec70c11> in <module>
----> 1 with open('C:\tmp.txt', 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'C:\tmp.txt'

In [4]: with open('tmp.txt', 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:

In [5]: path2='c:\Python\tmp.txt'

In [6]: with open(path2, 'w') as handle:
   ...:     handle.writelines(x for x in open(path) if len(x) > 1)
   ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-6-a72f2946401a> in <module>
----> 1 with open(path2, 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'c:\\Python\tmp.txt'

In [7]: path2
Out[7]: 'c:\\Python\tmp.txt'

In [8]: path
Out[8]: 'C:\\Python\\ReadFileTest.txt'

In [9]: path2='C:\Python\tmp.txt'

In [10]: path2
Out[10]: 'C:\\Python\tmp.txt'

In [11]: with open(path2, 'w') as handle:
    ...:     handle.writelines(x for x in open(path) if len(x) > 1)
    ...:
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-11-a72f2946401a> in <module>
----> 1 with open(path2, 'w') as handle:
      2     handle.writelines(x for x in open(path) if len(x) > 1)
      3

OSError: [Errno 22] Invalid argument: 'C:\\Python\tmp.txt'

In [12]: with open('tmp.txt') as entrada:
    ...:     lines = entrada.readlines
    ...:

In [13]: lines
Out[13]: <function TextIOWrapper.readlines(hint=-1, /)>

In [14]: with open('tmp.txt') as entrada:
    ...:     lines = entrada.readlines()
    ...:

In [15]: lines
Out[15]:
['SueÃÂ±a el rico en su riqueza,\n',
 'que mÃÂ¡s cuidados le ofrece;\n',
 'sueÃÂ±a el pobre que padece,\n',
 'su miseria y su pobreza;\n',
 'sueÃÂ±a el que a medrar empieza,\n',
 'sueÃÂ±a el que afana y pretende,\n',
 'sueÃÂ±a el que agravia y ofende,\n',
 'y en el mundo, en conclusiÃÂ³n,\n',
 'todos sueÃÂ±an lo que son\n',
 'aunque ninguno lo entiende\n']

In [16]: path='examples\segismundo.txt'

In [17]: with open(path) as f:
    ...:     lines=f.readlines()
    ...:
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-17-dfdd5f992763> in <module>
----> 1 with open(path) as f:
      2     lines=f.readlines()
      3

FileNotFoundError: [Errno 2] No such file or directory: 'examples\\segismundo.txt'

In [18]: path = 'examples/segismundo.txt'

In [19]: with open(path) as f:
    ...:     lines=f.readlines()
    ...:
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-19-dfdd5f992763> in <module>
----> 1 with open(path) as f:
      2     lines=f.readlines()
      3

FileNotFoundError: [Errno 2] No such file or directory: 'examples/segismundo.txt'

In [20]: path = 'C:\Python\ReadFileTest.txt'

In [21]: with open(path) as f:
    ...:     chars = f.read(10)
    ...:

In [22]: chars
Out[22]: 'SueÃÂ±a el '

In [23]: with open(path,'rb') as f:
    ...:     data = f.read(10)
    ...:

In [24]: data
Out[24]: b'Sue\xc3\xb1a el '

In [25]: data.decode('utf8')
Out[25]: 'SueÃ±a el '

In [26]: data[:4].decode('utf8')
---------------------------------------------------------------------------
UnicodeDecodeError                        Traceback (most recent call last)
<ipython-input-26-0ad9ad6a11bd> in <module>
----> 1 data[:4].decode('utf8')

UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc3 in position 3: unexpected end of data

In [27]:
                             
